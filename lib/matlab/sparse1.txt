#
# sp1 =
#
#   (2,6)       1.1000  |0 0 0 0 0   0   0   0
#   (3,7)       2.0000  |0 0 0 0 0 1.1   0   0
#   (5,8)       3.0000  |0 0 0 0 0   0 2.2   0
#                       |0 0 0 0 0   0   0   0
#                       |0 0 0 0 0   0   0 3.0
#
77	65	84	76	65	66	32	53
46	48	32	77	65	84	45	102
105	108	101	44	32	80	108	97
116	102	111	114	109	58	32	80
67	87	73	78	44	32	67	114
101	97	116	101	100	32	111	110
58	32	83	117	110	32	74	117
110	32	50	50	32	49	51	58
49	53	58	52	51	32	50	48
48	56	32	32	32	32	32	32
32	32	32	32	32	32	32	32
32	32	32	32	32	32	32	32
32	32	32	32	32	32	32	32
32	32	32	32	32	32	32	32
32	32	32	32	32	32	32	32
32	32	32	32	0	1	73	77

14	0	0	0	144	0	0	0
6	0	0	0	8	0	0	0
5	16	0	0	3	0	0	0

5	0	0	0	8	0	0	0
5	0	0	0	8	0	0	0

1	0	3	0	115(s)	112(p)	49(1)	0 name

5	0	0	0	12	0	0	0
1(2)	0	0	0	2(3)	0	0	0
4(5)	0	0	0	0	0	0	0

# jc points to an integer array of length N+1 that contains column index
# information. For j, in the range 0 <= j <= N–1, jc[j] is the index in ir and pr
# (and pi if it exists) of the first nonzero entry in the jth column and
# jc[j+1] - 1 index of the last nonzero entry. As a result, jc[N] is also equal
# to nnz, the number of nonzero entries in the matrix. If nnz is less than nzmax,
# then more nonzero entries can be inserted in the array without allocating
# additional storage.

5	0	0	0	36(4x9)	0	0	0
0	0	0	0	0	0	0	0
0	0	0	0	0	0	0	0
0	0	0	0	0	0	0	0
1(6)	0	0	0	2(7)	0	0	0
3(8)	0	0	0	0	0	0	0

9	0	0	0	24	0	0	0
154	153	153	153	153	153	241	63
0	0	0	0	0	0	0	64
0	0	0	0	0	0	8	64
